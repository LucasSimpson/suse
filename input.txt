
|f.(
	|x.(
		!f (!x (x))
	)(
		|z.(
			!f (!z (z))
		)
	)
) (
	|gf.(
		|n.(
			- (2) (n)
		)
	)
)



|x.( 
	|y.(!x (y))
) (
	|z.(* (z) (z))
) (100)








(function(y) {
	alert(y(
		function(givenFact) {
			return function(n) {
				if( n < 2 ) return 1;
				else return n * givenFact(n-1);
			}
		}
	)(5)); // Outputs 120 
	
	alert(y(
		function(givenFib) {
			return function(n) {
				if( n<=2 ) return 1;
				else return givenFib(n-1) + givenFib(n-2);
			}
		}
	)(5)); // Outputs 5
	
})(
	function(le) {
		return (function(f) { 
			return f(f); 
		})(function(f) {
			return le(
				function(x) { return (f(f))(x); }
			);
		});
	}
);





|a.(
	|b.(
		+ (!a (20) (10)) (!b (3))
	)
)(
	|x.(
		|y.(
			- (x) (y)
		)
	)
)(
	|x.(
		|y.(
			* (x) (y)
		)
	) (4)
)




|x.(
	!x (1)
) (
	|z.( + (z) (z) )
)




|x.(+ (x) (x))( * (10) (20))






FunctionContext {
	symbolStack = Stack ["y","f"], 
	symbolTable = [("x", FunctionContext {
		symbolStack = Stack ["z"], 
		symbolTable = [], 
		expression = FunctionCall "f" (Stack [
			FunctionCall "z" (Stack [ExpBoundVar (BoundVar "z")])
		])
	})], 

	expression = FunctionCall "f" (Stack [
		FunctionCall "x" (Stack [ExpBoundVar (BoundVar "x")])
	])
}








|w.(
	!w (
		|y.(
			* (y) (y)	
		)
	)
)(
	|x.(
		!x (30)
	)
)











|x.(
	|y.(
		|z.(
			* + x y z
		)
	)
)(5)(- 20 10)(2)



+ 10 50



