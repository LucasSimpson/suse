|x.(
	|y.(
		!x (y)
	) (2)
) (
	|z.( + (z) (z) )
)


	|z.(
		|w. ( + (w) (z) )
	) (10)

FunctionContext {
	symbolStack = Stack ["x"], 
	symbolTable = [("y", Constant 2)], 
	expression = ExpFunctionCall (FunctionCall "x" (Stack [ExpBoundVar (BoundVar "y")]))
}



|f.(
	|x.(
		!f (!x (x))
	)(
		|z.(
			!f (!z (z))
		)
	)
)
(
	|n.(
		|rec.(
			if (n) then (!rec (n - 1) (rec)) else (1)
		)
	) (3)
)

FunctionContext {
	symbolStack = Stack ["y","f"], 
	symbolTable = [("x", FunctionContext {
		symbolStack = Stack ["z"], 
		symbolTable = [], 
		expression = FunctionCall "f" (Stack [
			FunctionCall "z" (Stack [ExpBoundVar (BoundVar "z")])
		])
	})], 

	expression = FunctionCall "f" (Stack [
		FunctionCall "x" (Stack [ExpBoundVar (BoundVar "x")])
	])
}





|a.(
	|b.(
		+ (!a (20) (10)) (!b (3))
	)
)(
	|x.(
		|y.(
			- (x) (y)
		)
	)
)(
	|x.(
		|y.(
			* (x) (y)
		)
	) (4)
)


|w.(
	!w (
		|y.(
			* (y) (y)	
		)
	)
)(
	|x.(
		!x (30)
	)
)











|x.(
	|y.(
		|z.(
			* + x y z
		)
	)
)(5)(- 20 10)(2)



+ 10 50



