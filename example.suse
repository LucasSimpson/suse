## 
	This code outputs 'Right [True, " it worked!", "Wow"]' 
	Lucas Simpson, 2019-02-18 20:13 EST, Toronto, Canada
##

let 

## run a parser on contents of input.txt ##
runParser = |p(parser) { parser (readFile ("input.txt")) };

## Get everything except the first element in a list ##
tail = |t(xs) { slice (1) (len (xs)) (xs) };

## fmap for lists ##
listFmap = |f(mapFunc) {
	|l(list) {
		if (== (0) (len (list))) then (
			[]
		) else (
			concat ([mapFunc (list!!(0))]) (f (mapFunc) (
				|t(xs) { slice (1) (len (xs)) (xs) } (list))
			)
		)
	}	
};

## oh yeah we better believe can foldl ##
foldl = |f(combFunc) {
	|s(start) {
		|l(list) {
			if (== (len(list)) (0)) then (
				start
			) else (
					f 
						(combFunc) 
						(combFunc (start) (list!!(0))) 
						(|t(xs) { slice (1) (len (xs)) (xs) } (list))
			)
		}
	}
};

## create a parser from a condition function ##
## Parser returns [success :: Bool, remInput :: String, match :: String]  ##
createParser = |cp(condFunc) {
	|parser(text) {
		if (== (len (text)) (0)) then (
			[False, text, ""]
		) else (
			if (condFunc (text!!(0))) then (
				[True, tail (text), text!!(0)]
			) else (
				[False, text, ""]
			)
		)
	}
};

## Create a parser for a single character ##
pChar = |c(wantedChar) {
	createParser (
		|x(inputChar) { == (wantedChar) (inputChar) }
	)	
};

## map parser output ##
parserFmap = |f(mapFunc) {
	|p(parser) {
		|newParser(text) {
			let 
				result = parser(text);
				didSucceed = result!!(0);
				remText = result!!(1);
				match = result!!(2);
			in if (didSucceed) then (
				[True, remText, mapFunc(match)]
			) else (
				result
			)
		}
	}	
};

## bind parsers together (>>=) ##
parserBind = |p(parser) {
	|bf(bindFunc) {
		|newParser(text) {
			let
			firstParserResult = parser(text);
			didSucceed = firstParserResult!!(0);
			remText = firstParserResult!!(1);
			match = firstParserResult!!(2);

			in if (didSucceed) then (
				let
					builtParser = bindFunc(match);
				in builtParser(remText)
			) else (
				firstParserResult
			)
		}
	}
};

## convert char to list ##
toList = |f(x) { [x] };

## match two parser succesively, results in list ##
pCont = |x(parserOne) {
	|y(parserTwo) {
		parserBind (parserOne) (	
			|x(r) {  
				parserFmap (concat (r)) (parserTwo)  
			}	
		)
	}	
};

## make parser for a sequence of characters ##
pSeq = |s(sequence) {
	let 
		listParsers = listFmap (
				|c(char) {
					parserFmap (toList) (pChar (char))
				}
			) (sequence);
	in  if (== (len (listParsers)) (1)) then (
			listParsers!!(0)
		) else (
			foldl (pCont) (listParsers!!(0)) (tail (listParsers))
		)
};

## let the magic start ##
in runParser (pSeq ("Wow"))

